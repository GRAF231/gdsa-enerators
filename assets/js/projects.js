/**
 * –°–¢–†–ê–ù–ò–¶–ê –í–´–ü–û–õ–ù–ï–ù–ù–´–• –ü–†–û–ï–ö–¢–û–í
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */

class ProjectsPage {
    constructor() {
        this.currentFilters = {
            power: null,
            industry: null,
            city: null,
            year: null
        };
        
        this.currentView = 'grid';
        this.currentPage = 1;
        this.perPage = 100;
        
        this.projects = [];
        this.filteredProjects = [];
        
        this.init();
    }

    init() {
        this.initElements();
        this.initFilters();
        this.initPagination();
        this.initViewToggle();
        this.initAnimations();
        this.bindEvents();
        
        console.log('‚úÖ ProjectsPage initialized');
    }

    initElements() {
        this.filterTabs = document.querySelectorAll('.projects-filters__tab');
        this.filterPanels = document.querySelectorAll('.projects-filters__panel');
        this.filterOptions = document.querySelectorAll('.projects-filters__option');
        this.viewButtons = document.querySelectorAll('.projects-filters__view-btn');
        this.projectCards = document.querySelectorAll('.project-card');
        this.paginationButtons = document.querySelectorAll('.pagination__page');
        this.perPageButtons = document.querySelectorAll('.pagination__per-page-btn');
        this.prevButton = document.querySelector('.pagination__btn_prev');
        this.nextButton = document.querySelector('.pagination__btn_next');
        this.projectsGrid = document.querySelector('.projects-grid__items');
        this.paginationControls = document.querySelector('.pagination');
        this.resetButton = document.querySelector('.projects-filters__reset-btn');
    }

    initFilters() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        const activeTab = document.querySelector('.projects-filters__tab_active');
        if (activeTab) {
            this.currentFilters.power = activeTab.dataset.filter;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å "–í—Å–µ"
        this.currentFilters = {
            power: 'all',
            industry: 'all',
            city: 'all',
            year: 'all'
        };

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ "–í—Å–µ" –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        this.filterOptions.forEach(option => {
            if (option.dataset.value === 'all') {
                option.classList.add('active');
            }
        });

        // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö
        this.projects = Array.from(this.projectCards).map(card => ({
            element: card,
            power: card.dataset.power,
            industry: card.dataset.industry,
            city: card.dataset.city,
            year: card.dataset.year
        }));

        this.filteredProjects = [...this.projects];
    }

    initPagination() {
        this.totalProjects = this.filteredProjects.length;
        this.totalPages = Math.ceil(this.totalProjects / this.perPage);
        this.updatePaginationDisplay();
    }

    initViewToggle() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∞
        const activeViewButton = document.querySelector('.projects-filters__view-btn_active');
        if (activeViewButton) {
            this.currentView = activeViewButton.dataset.view;
        }
    }

    initAnimations() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–π –ø–æ—è–≤–ª–µ–Ω–∏—è
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.animationPlayState = 'running';
                }
            });
        }, observerOptions);

        this.projectCards.forEach(card => {
            observer.observe(card);
        });
    }

    bindEvents() {
        // –§–∏–ª—å—Ç—Ä—ã –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
        this.filterTabs.forEach(tab => {
            tab.addEventListener('click', (e) => {
                this.switchFilterTab(e.target);
            });
        });

        // –û–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.filterOptions.forEach(option => {
            option.addEventListener('click', (e) => {
                this.toggleFilterOption(e.target);
            });
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∞
        this.viewButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                this.switchView(e.target);
            });
        });

        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ createPageButton

        // –ö–Ω–æ–ø–∫–∏ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è" –∏ "–°–ª–µ–¥—É—é—â–∞—è"
        if (this.prevButton) {
            this.prevButton.addEventListener('click', () => {
                this.goToPage(this.currentPage - 1);
            });
        }

        if (this.nextButton) {
            this.nextButton.addEventListener('click', () => {
                this.goToPage(this.currentPage + 1);
            });
        }

        // –ö–Ω–æ–ø–∫–∏ "–í—ã–≤–æ–¥–∏—Ç—å –ø–æ"
        this.perPageButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                this.changePerPage(parseInt(e.target.dataset.perPage));
            });
        });

        // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if (this.resetButton) {
            this.resetButton.addEventListener('click', () => {
                this.resetAllFilters();
            });
        }

        // –ö–ª–∏–∫–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º –ø—Ä–æ–µ–∫—Ç–æ–≤
        this.projectCards.forEach(card => {
            card.addEventListener('click', (e) => {
                this.openProjectModal(card);
            });
        });

        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        document.addEventListener('keydown', (e) => {
            this.handleKeyboard(e);
        });
    }

    switchFilterTab(tab) {
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
        this.filterTabs.forEach(t => t.classList.remove('projects-filters__tab_active'));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
        tab.classList.add('projects-filters__tab_active');
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–∞–Ω–µ–ª–∏
        const filterType = tab.dataset.filter;
        this.filterPanels.forEach(panel => {
            panel.classList.remove('projects-filters__panel_active');
            if (panel.dataset.panel === filterType) {
                panel.classList.add('projects-filters__panel_active');
            }
        });

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        console.log(`üîÑ Switched to ${filterType} filter`);
        this.showNotification(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω —Ñ–∏–ª—å—Ç—Ä: ${tab.textContent.trim()}`);
    }

    toggleFilterOption(option) {
        const filterType = option.closest('.projects-filters__panel').dataset.panel;
        const filterValue = option.dataset.value;
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –¥—Ä—É–≥–∏—Ö –æ–ø—Ü–∏–π —ç—Ç–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        const panel = option.closest('.projects-filters__panel');
        panel.querySelectorAll('.projects-filters__option').forEach(opt => {
            opt.classList.remove('active');
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏
        option.classList.add('active');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        this.currentFilters[filterType] = filterValue;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        this.applyFilters();
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const filterName = option.textContent.trim();
        console.log(`üîç Filter applied: ${filterType} = ${filterValue}`);
        this.showNotification(`–ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä: ${filterName}`);
    }

    applyFilters() {
        this.filteredProjects = this.projects.filter(project => {
            return Object.entries(this.currentFilters).every(([key, value]) => {
                // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–í—Å–µ" –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
                return !value || value === 'all' || project[key] === value;
            });
        });

        this.currentPage = 1;
        this.updateDisplay();
        
        console.log(`üìä Filtered projects: ${this.filteredProjects.length} of ${this.projects.length}`);
    }

    resetAllFilters() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ "–í—Å–µ"
        this.currentFilters = {
            power: 'all',
            industry: 'all',
            city: 'all',
            year: 'all'
        };

        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –æ–ø—Ü–∏–π
        this.filterOptions.forEach(option => {
            option.classList.remove('active');
        });

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ "–í—Å–µ"
        this.filterOptions.forEach(option => {
            if (option.dataset.value === 'all') {
                option.classList.add('active');
            }
        });

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        this.applyFilters();

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        console.log(`üîÑ All filters reset to "All"`);
        this.showNotification(`–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã`);
    }

    switchView(button) {
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        this.viewButtons.forEach(btn => btn.classList.remove('projects-filters__view-btn_active'));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ
        button.classList.add('projects-filters__view-btn_active');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–∏–¥
        this.currentView = button.dataset.view;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π –≤–∏–¥
        this.applyView();
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const viewName = this.currentView === 'grid' ? '–°–µ—Ç–∫–∞' : '–°–ø–∏—Å–æ–∫';
        console.log(`üëÅÔ∏è View switched to: ${viewName}`);
        this.showNotification(`–í–∏–¥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${viewName}`);
    }

    applyView() {
        if (this.currentView === 'list') {
            this.projectsGrid.classList.add('projects-grid__items_list');
        } else {
            this.projectsGrid.classList.remove('projects-grid__items_list');
        }
    }

    goToPage(page) {
        if (page < 1 || page > this.totalPages || page === this.currentPage) return;
        
        this.currentPage = page;
        this.updateDisplay();
        
        // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–∞—á–∞–ª—É —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
        this.scrollToProjects();
        
        console.log(`üìÑ Navigated to page: ${page}`);
        this.showNotification(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${this.totalPages}`);
        
        // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        this.trackPaginationUsage(page);
    }

    scrollToProjects() {
        const projectsSection = document.querySelector('.projects-grid');
        if (projectsSection) {
            projectsSection.scrollIntoView({ 
                behavior: 'smooth', 
                block: 'start' 
            });
        }
    }

    changePerPage(perPage) {
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        this.perPageButtons.forEach(btn => btn.classList.remove('pagination__per-page-btn_active'));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ
        const activeButton = Array.from(this.perPageButtons).find(btn => 
            btn.dataset.perPage === perPage.toString()
        );
        if (activeButton) {
            activeButton.classList.add('pagination__per-page-btn_active');
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ü–∏—é "–í—Å–µ"
        if (perPage === 'all') {
            this.perPage = this.filteredProjects.length;
        } else {
            this.perPage = parseInt(perPage);
        }
        
        this.currentPage = 1;
        this.updateDisplay();
        
        const displayValue = perPage === 'all' ? '–í—Å–µ' : perPage;
        console.log(`üìä Items per page changed to: ${displayValue}`);
        this.showNotification(`–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ: ${displayValue} –ø—Ä–æ–µ–∫—Ç–æ–≤`);
    }

    updateDisplay() {
        this.updatePagination();
        this.showProjects();
    }

    updatePagination() {
        this.totalPages = Math.ceil(this.filteredProjects.length / this.perPage);
        this.updatePaginationDisplay();
    }

    updatePaginationDisplay() {
        const pagesContainer = document.querySelector('.pagination__pages');
        if (!pagesContainer) return;

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü
        pagesContainer.innerHTML = '';

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
        this.generatePaginationButtons(pagesContainer);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è" –∏ "–°–ª–µ–¥—É—é—â–∞—è"
        if (this.prevButton) {
            this.prevButton.disabled = this.currentPage === 1;
        }
        if (this.nextButton) {
            this.nextButton.disabled = this.currentPage === this.totalPages;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
        if (this.totalPages <= 1) {
            // –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
            const navContainer = document.querySelector('.pagination__nav');
            if (navContainer) {
                const pagesContainer = navContainer.querySelector('.pagination__pages');
                const btnContainer = navContainer.querySelector('.pagination__btn');
                
                if (pagesContainer) pagesContainer.style.display = 'none';
                if (btnContainer) btnContainer.style.display = 'none';
            }
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            const navContainer = document.querySelector('.pagination__nav');
            if (navContainer) {
                const pagesContainer = navContainer.querySelector('.pagination__pages');
                const btnContainer = navContainer.querySelector('.pagination__btn');
                
                if (pagesContainer) pagesContainer.style.display = 'flex';
                if (btnContainer) btnContainer.style.display = 'flex';
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        this.updateResultsInfo();
    }

    generatePaginationButtons(container) {
        const maxVisiblePages = 7; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        let startPage = Math.max(1, this.currentPage - Math.floor(maxVisiblePages / 2));
        let endPage = Math.min(this.totalPages, startPage + maxVisiblePages - 1);

        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –º—ã –±–ª–∏–∑–∫–æ –∫ –∫–æ–Ω—Ü—É
        if (endPage - startPage < maxVisiblePages - 1) {
            startPage = Math.max(1, endPage - maxVisiblePages + 1);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (startPage > 1) {
            this.createPageButton(container, 1);
            if (startPage > 2) {
                this.createDotsButton(container);
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∏–º—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for (let i = startPage; i <= endPage; i++) {
            this.createPageButton(container, i);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (endPage < this.totalPages) {
            if (endPage < this.totalPages - 1) {
                this.createDotsButton(container);
            }
            this.createPageButton(container, this.totalPages);
        }
    }

    createPageButton(container, pageNumber) {
        const button = document.createElement('button');
        button.className = 'pagination__page';
        button.textContent = pageNumber;
        button.dataset.page = pageNumber;

        if (pageNumber === this.currentPage) {
            button.classList.add('pagination__page_active');
        }

        button.addEventListener('click', () => {
            this.goToPage(pageNumber);
        });

        container.appendChild(button);
    }

    createDotsButton(container) {
        const dots = document.createElement('span');
        dots.className = 'pagination__dots';
        dots.textContent = '...';
        container.appendChild(dots);
    }

    updateResultsInfo() {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
        let resultsInfo = document.querySelector('.projects-pagination__results');
        if (resultsInfo) {
            resultsInfo.remove();
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        const startItem = (this.currentPage - 1) * this.perPage + 1;
        const endItem = Math.min(this.currentPage * this.perPage, this.filteredProjects.length);
        const totalItems = this.filteredProjects.length;

        resultsInfo = document.createElement('div');
        resultsInfo.className = 'pagination__results';
        resultsInfo.innerHTML = `
            <span class="pagination__results-text">
                –ü–æ–∫–∞–∑–∞–Ω–æ ${startItem}-${endItem} –∏–∑ ${totalItems} –ø—Ä–æ–µ–∫—Ç–æ–≤
            </span>
        `;

        // –í—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        const navContainer = document.querySelector('.pagination__nav');
        if (navContainer) {
            navContainer.insertBefore(resultsInfo, navContainer.firstChild);
        }
    }

    showProjects() {
        const startIndex = (this.currentPage - 1) * this.perPage;
        const endIndex = startIndex + this.perPage;
        const projectsToShow = this.filteredProjects.slice(startIndex, endIndex);

        // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        this.projectsGrid.classList.add('filtering');
        
        setTimeout(() => {
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
            this.projectCards.forEach(card => {
                card.style.display = 'none';
                card.classList.add('hidden');
                card.style.animationDelay = '0s';
            });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            projectsToShow.forEach((project, index) => {
                project.element.style.display = 'block';
                project.element.classList.remove('hidden');
                project.element.style.animationDelay = `${index * 0.05}s`;
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                project.element.style.animation = 'none';
                project.element.offsetHeight; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π reflow
                project.element.style.animation = null;
            });

            // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            this.projectsGrid.classList.remove('filtering');
        }, 150);
    }

    openProjectModal(projectCard) {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–µ–∫—Ç–µ
        const title = projectCard.querySelector('.project-card__title').textContent;
        const client = projectCard.querySelector('.project-card__client').textContent;
        const power = projectCard.querySelector('.project-card__power').textContent;
        const image = projectCard.querySelector('.project-card__image img').src;

        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = this.createModal({
            title,
            client,
            power,
            image
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        document.body.appendChild(modal);
        modal.classList.add('modal_show');

        // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        console.log(`üîç Project modal opened: ${title}`);
        this.showNotification(`–û—Ç–∫—Ä—ã—Ç –ø—Ä–æ–µ–∫—Ç: ${title}`);
    }

    createModal(data) {
        const modal = document.createElement('div');
        modal.className = 'project-modal';
        modal.innerHTML = `
            <div class="project-modal__backdrop"></div>
            <div class="project-modal__content">
                <button class="project-modal__close" aria-label="–ó–∞–∫—Ä—ã—Ç—å">
                    <i class="fa-solid fa-times" aria-hidden="true"></i>
                </button>
                <div class="project-modal__image">
                    <img src="${data.image}" alt="${data.title}" loading="lazy">
                    <div class="project-modal__power">${data.power}</div>
                </div>
                <div class="project-modal__info">
                    <h2 class="project-modal__title">${data.title}</h2>
                    <p class="project-modal__client"><strong>–ó–∞–∫–∞–∑—á–∏–∫:</strong> ${data.client}</p>
                    <div class="project-modal__details">
                        <h3>–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞</h3>
                        <ul>
                            <li><strong>–ú–æ—â–Ω–æ—Å—Ç—å:</strong> ${data.power}</li>
                            <li><strong>–°—Ç–∞—Ç—É—Å:</strong> –ó–∞–≤–µ—Ä—à–µ–Ω</li>
                            <li><strong>–°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:</strong> 6 –º–µ—Å—è—Ü–µ–≤</li>
                            <li><strong>–ì–∞—Ä–∞–Ω—Ç–∏—è:</strong> 24 –º–µ—Å—è—Ü–∞</li>
                        </ul>
                    </div>
                    <div class="project-modal__actions">
                        <button class="project-modal__btn project-modal__btn_primary">
                            <i class="fa-solid fa-phone" aria-hidden="true"></i>
                            –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏
                        </button>
                        <button class="project-modal__btn project-modal__btn_secondary">
                            <i class="fa-solid fa-download" aria-hidden="true"></i>
                            –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
                        </button>
                    </div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        const closeBtn = modal.querySelector('.project-modal__close');
        const backdrop = modal.querySelector('.project-modal__backdrop');

        closeBtn.addEventListener('click', () => this.closeModal(modal));
        backdrop.addEventListener('click', () => this.closeModal(modal));

        return modal;
    }

    closeModal(modal) {
        modal.classList.remove('modal_show');
        setTimeout(() => {
            if (modal.parentNode) {
                modal.parentNode.removeChild(modal);
            }
        }, 300);
    }

    handleKeyboard(e) {
        switch (e.key) {
            case 'Escape':
                const openModal = document.querySelector('.project-modal_show');
                if (openModal) {
                    this.closeModal(openModal);
                }
                break;
            case 'ArrowLeft':
            case 'ArrowUp':
                if (this.currentPage > 1) {
                    this.goToPage(this.currentPage - 1);
                }
                break;
            case 'ArrowRight':
            case 'ArrowDown':
                if (this.currentPage < this.totalPages) {
                    this.goToPage(this.currentPage + 1);
                }
                break;
            case 'Home':
                if (this.currentPage > 1) {
                    this.goToPage(1);
                }
                break;
            case 'End':
                if (this.currentPage < this.totalPages) {
                    this.goToPage(this.totalPages);
                }
                break;
            case 'PageUp':
                const prevPage = Math.max(1, this.currentPage - 5);
                if (prevPage !== this.currentPage) {
                    this.goToPage(prevPage);
                }
                break;
            case 'PageDown':
                const nextPage = Math.min(this.totalPages, this.currentPage + 5);
                if (nextPage !== this.currentPage) {
                    this.goToPage(nextPage);
                }
                break;
        }
    }

    showNotification(message) {
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = 'notification';
        notification.textContent = message;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        Object.assign(notification.style, {
            position: 'fixed',
            top: '20px',
            right: '20px',
            background: 'linear-gradient(135deg, #0a1855 0%, #3b5fdb 100%)',
            color: '#ffffff',
            padding: '12px 20px',
            borderRadius: '8px',
            boxShadow: '0 8px 25px rgba(10, 24, 85, 0.3)',
            zIndex: '10000',
            fontSize: '14px',
            fontWeight: '500',
            transform: 'translateX(100%)',
            transition: 'transform 0.3s ease'
        });
        
        document.body.appendChild(notification);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    trackFilterUsage(filterType, filterValue) {
        console.log(`üìä Analytics: Filter used - ${filterType}: ${filterValue}`);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    }

    trackProjectView(projectTitle) {
        console.log(`üìä Analytics: Project viewed - ${projectTitle}`);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    }

    trackPaginationUsage(page) {
        console.log(`üìä Analytics: Page navigated - ${page}`);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    new ProjectsPage();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ProjectsPage;
}
