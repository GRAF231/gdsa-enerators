/**
 * Tenders Page JavaScript
 * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–µ–Ω–¥–µ—Ä–æ–≤
 */

class TendersPage {
    constructor() {
        this.init();
    }

    init() {
        this.setupAnimations();
        this.setupScrollEffects();
        this.setupTableInteractions();
        this.setupStatistics();
        this.setupAnalytics();
        this.setupAccessibility();
        
        console.log('‚úÖ TendersPage initialized');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    setupAnimations() {
        // Intersection Observer –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('visible');
                    
                    // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    if (entry.target.classList.contains('tenders-stats__item')) {
                        this.animateCounter(entry.target);
                    }
                }
            });
        }, observerOptions);

        // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        const animatedElements = document.querySelectorAll(`
            .tenders-intro,
            .tenders-section,
            .tenders-table,
            .tenders-stats__item,
            .tenders-cta
        `);

        animatedElements.forEach(el => {
            el.classList.add('fade-in-up');
            observer.observe(el);
        });

        console.log('üé¨ Animations setup complete');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å–∫—Ä–æ–ª–ª–∞
     */
    setupScrollEffects() {
        let ticking = false;

        const updateScrollEffects = () => {
            const scrollY = window.scrollY;
            const windowHeight = window.innerHeight;
            
            // –ü–∞—Ä–∞–ª–ª–∞–∫—Å —ç—Ñ—Ñ–µ–∫—Ç —É–¥–∞–ª–µ–Ω
            
            // –≠—Ñ—Ñ–µ–∫—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            const table = document.querySelector('.tenders-table');
            if (table) {
                const tableRect = table.getBoundingClientRect();
                const isVisible = tableRect.top < windowHeight && tableRect.bottom > 0;
                
                if (isVisible) {
                    table.style.opacity = '1';
                    table.style.transform = 'translateY(0)';
                }
            }

            ticking = false;
        };

        const requestScrollUpdate = () => {
            if (!ticking) {
                requestAnimationFrame(updateScrollEffects);
                ticking = true;
            }
        };

        window.addEventListener('scroll', requestScrollUpdate, { passive: true });
        
        console.log('üìú Scroll effects setup complete');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã
     */
    setupTableInteractions() {
        const tableRows = document.querySelectorAll('.tenders-table__row');
        
        tableRows.forEach((row, index) => {
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
            row.style.animationDelay = `${index * 0.1}s`;
            
            // Hover —ç—Ñ—Ñ–µ–∫—Ç—ã
            row.addEventListener('mouseenter', () => {
                row.style.transform = 'translateX(5px) scale(1.02)';
                row.style.boxShadow = '0 10px 30px rgba(0, 0, 0, 0.15)';
            });
            
            row.addEventListener('mouseleave', () => {
                row.style.transform = 'translateX(0) scale(1)';
                row.style.boxShadow = '0 5px 15px rgba(0, 0, 0, 0.1)';
            });

            // –£–±—Ä–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            // –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –±–æ–ª—å—à–µ –Ω–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã
        });

        console.log('üìä Table interactions setup complete');
    }

    // –§—É–Ω–∫—Ü–∏—è showContractDetails —É–¥–∞–ª–µ–Ω–∞ - –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    animateCounter(element) {
        const numberEl = element.querySelector('.tenders-stats__number');
        if (!numberEl) return;

        const text = numberEl.textContent;
        const number = parseFloat(text.replace(/[^\d.,]/g, '').replace(',', '.'));
        const suffix = text.replace(/[\d.,]/g, '');

        if (isNaN(number)) return;

        let current = 0;
        const increment = number / 60; // 60 –∫–∞–¥—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
        const duration = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã
        const stepTime = duration / 60;

        const timer = setInterval(() => {
            current += increment;
            if (current >= number) {
                current = number;
                clearInterval(timer);
            }

            let displayValue;
            if (number >= 1000000000) {
                displayValue = (current / 1000000000).toFixed(1) + ' –º–ª—Ä–¥';
            } else if (number >= 1000000) {
                displayValue = (current / 1000000).toFixed(0) + ' –º–ª–Ω';
            } else if (number >= 1000) {
                displayValue = Math.floor(current / 1000) + ' —Ç—ã—Å';
            } else {
                displayValue = Math.floor(current);
            }

            numberEl.textContent = displayValue + suffix;
        }, stepTime);

        console.log('üî¢ Counter animation started for:', text);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
     */
    setupAnalytics() {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ç–∞–±–ª–∏—Ü
        const tables = document.querySelectorAll('.tenders-table');
        tables.forEach((table, index) => {
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        console.log(`üìä Table ${index + 1} viewed`);
                        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
                    }
                });
            }, { threshold: 0.5 });

            observer.observe(table);
        });

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤ –ø–æ CTA –∫–Ω–æ–ø–∫–∞–º
        const ctaButtons = document.querySelectorAll('.tenders-cta__actions .btn');
        ctaButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                const action = btn.textContent.trim();
                console.log(`üéØ CTA clicked: ${action}`);
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            });
        });

        console.log('üìà Analytics setup complete');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
     */
    setupAccessibility() {
        // ARIA labels –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        const table = document.querySelector('.tenders-table');
        if (table) {
            table.setAttribute('role', 'table');
            table.setAttribute('aria-label', '–¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø–æ 44-–§–ó –∏ 223-–§–ó');
        }

        // ARIA labels –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const statsItems = document.querySelectorAll('.tenders-stats__item');
        statsItems.forEach((item, index) => {
            const number = item.querySelector('.tenders-stats__number');
            const label = item.querySelector('.tenders-stats__label');
            
            if (number && label) {
                item.setAttribute('aria-label', `${number.textContent} ${label.textContent}`);
            }
        });

        // Keyboard navigation –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        statsItems.forEach(item => {
            item.setAttribute('tabindex', '0');
            item.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    item.click();
                }
            });
        });

        console.log('‚ôø Accessibility setup complete');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    new TendersPage();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = TendersPage;
}
